<?xml version="1.0" encoding="UTF-8"?>

<!-- 
* security.xml 
* 
* Copyright (C) 2012 Universidad de Sevilla 
* 
* The use of this project is hereby constrained to the conditions of the 
* TDG Licence, a copy of which you may download from 
* http://www.tdg-seville.info/License.html 
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"	
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd		
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd		
      ">   
    
    <!--===============================-->
    <!--  ACCESS CONTROL CONFIGURATION -->
    <!--===============================-->    
<bean id="ajaxTimeoutRedirectFilter" class="es.us.isa.ideas.app.security.IdeasTimeoutRedirectFilter">
    <property name="customSessionExpiredErrorCode" value="901"/>
</bean>
<!--     <security:http auto-config="true" use-expressions="true" entry-point-ref="authenticationEntryPoint">    -->
        <security:http auto-config="true" use-expressions="true">          

        
        <!-- Enables Spring Security CSRF protection -->
        <!--<security:csrf/>-->
        <!--================-->
        <!-- Access control -->
        <!--================-->
        <security:intercept-url pattern="/" access="permitAll" />
        <security:intercept-url pattern="/j_spring_security_check" access="permitAll"/>
        <security:intercept-url pattern="/welcome/**" access="permitAll" />
        <!-- Basic Resources access -->
        <security:intercept-url pattern="/views/help/**" access="permitAll" />
        <security:intercept-url pattern="/#{studioConfiguration.helpURI}" access="permitAll"  requires-channel="https" />
        <security:intercept-url pattern="/favicon.ico" access="permitAll"  requires-channel="https" />
        <security:intercept-url pattern="/img/**" access="permitAll"  requires-channel="https" />
        <security:intercept-url pattern="/js/**" access="permitAll"  requires-channel="https" />
        <security:intercept-url pattern="/fonts/**" access="permitAll"  requires-channel="https" />
        <security:intercept-url pattern="/css/**" access="permitAll"  requires-channel="https" />
        <!-- Required by he Sprint social connection controller -->
        <security:intercept-url pattern="/connect/**" access="permitAll"  requires-channel="https"/>
        <security:intercept-url pattern="/disconnect/**" access="permitAll"  requires-channel="https" />
        
        <security:intercept-url pattern="/resources/**" access="hasRole('RESEARCHER')" requires-channel="https" />                                            
<!--         <security:intercept-url pattern="/resources/**" access="permitAll" requires-channel="https" /> -->
<!--         <security:intercept-url pattern="/errorpages/**" access="permitAll" requires-channel="https"/> -->
        <security:intercept-url pattern="/resources/**" access="permitAll" />
        <security:intercept-url pattern="/errorpages/**" access="permitAll"/>
        <security:intercept-url pattern="/signin/**" access="permitAll"/>
        <security:intercept-url pattern="/social/signin/**" access="permitAll"/>
        <security:intercept-url pattern="/signup/**" access="permitAll"/>
        <security:intercept-url pattern="/social/signup/**" access="permitAll"/>
        <security:intercept-url pattern="/security/login" access="permitAll" requires-channel="https"/>
        <security:intercept-url pattern="/security/loginFailure" access="permitAll" requires-channel="https"/>
        <security:intercept-url pattern="/security/useraccount/list" access="hasRole('ADMIN')"  requires-channel="https"/>
        <security:intercept-url pattern="/security/useraccount/edit" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/security/useraccount/general" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/security/useraccount/resetPassword" access="permitAll" requires-channel="https"/>                
        <security:intercept-url pattern="/researcher/create" access="permitAll" requires-channel="https"/>
        <security:intercept-url pattern="/researcher/list" access="hasRole('ADMIN') || hasRole('RESEARCHER')" requires-channel="https"/>
        <security:intercept-url pattern="/researcher/edit" access="hasRole('ADMIN') || hasRole('RESEARCHER')" requires-channel="https"/>        
        <security:intercept-url pattern="/researcher/social" access="hasRole('ADMIN') || hasRole('RESEARCHER')" requires-channel="https"/>
        <security:intercept-url pattern="/researcher/principaluser" access="hasRole('ADMIN') || hasRole('RESEARCHER')" requires-channel="https"/>          
        <security:intercept-url pattern="/researcher/delete" access="hasRole('ADMIN') || hasRole('RESEARCHER')" />             
        <security:intercept-url pattern="/confirm/**" access="permitAll"  requires-channel="https"/>
        <security:intercept-url pattern="/app/wsm" access="permitAll"  requires-channel="https"/>
        <security:intercept-url pattern="/app/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/app_content/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/app_content/app_administration_content" access="hasRole('ADMIN')"  requires-channel="https"/>
        <security:intercept-url pattern="/files/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/tags/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/views/workspace/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/workspaces/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
<!--        <security:intercept-url pattern="/wsm" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>-->
        <security:intercept-url pattern="/analyse/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/command/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/convert/**" access="hasRole('ADMIN') || hasRole('RESEARCHER')"  requires-channel="https"/>
        <security:intercept-url pattern="/settings/user" access="permitAll" requires-channel="https"/>
        <security:intercept-url pattern="/settings/useraccount" access="hasRole('ADMIN') || hasRole('RESEARCHER')" requires-channel="https"/>
        <security:intercept-url pattern="/settings/admin" access="hasRole('ADMIN')" requires-channel="https"/>
        <security:intercept-url pattern="/settings/detail" access="hasRole('ADMIN')" requires-channel="https"/>
        <security:intercept-url pattern="/module/**" access="permitAll"/>
        <security:intercept-url pattern="/demo/**" access="permitAll"/>
        
        <security:intercept-url pattern="/**" access="hasRole('ADMIN')" requires-channel="https"/>
        
         <security:custom-filter ref="ajaxTimeoutRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        <security:form-login login-page="/security/login"
                                 password-parameter="password" username-parameter="username"
                                 default-target-url="/app/wsm"
                                 authentication-failure-url="/security/loginFailure"
                                   />

        <security:logout logout-success-url="/welcome" invalidate-session="true" delete-cookies="JESSIONID"/>
        
        <!-- Adds social authentication filter to the Spring Security filter chain.
        <security:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />  -->
        
        <!-- Authentication models are basic and digest for th restfull APIs -->
        <!-- <security:http-basic />
        <security:custom-filter ref="digestFilter" after="BASIC_AUTH_FILTER" /> -->
        <security:port-mappings>
            <security:port-mapping http="8888" https="8881" />
        </security:port-mappings>
    </security:http>
    
    <!--===============================-->
    <!-- BASIC SECURITY INFRASTRUCTURE -->
    <!--===============================-->

    <!--
        Configures the authentication manager bean which processes authentication
        requests.
    -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="loginService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>

       <!-- <security:authentication-provider ref="socialAuthenticationProvider"/>-->
    </security:authentication-manager>

    <bean id="loginService" class="es.us.isa.ideas.app.security.LoginService" />

    <bean id="passwordEncoder"
          class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />               
         
    <!-- Digest authentication -->                
    <bean id="digestFilter" class="org.springframework.security.web.authentication.www.DigestAuthenticationFilter">
        <property name="userDetailsService" ref="loginService" />
        <property name="authenticationEntryPoint" ref="digestEntryPoint" />
    </bean>
   
    <bean id="digestEntryPoint" class="org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint">
        <property name="realmName" value="${security.digestReamlName}"/>
        <property name="key" value="${security.digestKey}" />
    </bean>
    
    <!--===============================-->
    <!-- SOCIAL SECURITY CONFIGURATION -->
    <!--===============================-->
    <!--
        Configures the social authentication filter which integrates Spring Social
        with Spring Security.
    -->
    <!--
    <bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <constructor-arg index="0" ref="authenticationManager"/>
        <constructor-arg index="1" ref="userIdSource"/>
        <constructor-arg index="2" ref="usersConnectionRepository"/>
        <constructor-arg index="3" ref="connectionFactoryLocator"/>
        -->
        <!-- Sets the url of the registration form. -->
        <!--<property name="signupUrl" value="/social/signup"/>
    </bean>-->

    <!--
        Configures the social authentication provider which processes authentication requests
        made by using supported social authentication services (FB, Twitter and so on).
    -->
    <!-- <bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider">
        <constructor-arg index="0" ref="usersConnectionRepository"/>
        <constructor-arg index="1" ref="simpleSocialLoginService"/>
    </bean>-->

    <!--
        This bean determines the account ID of the user. The example application
        uses the username as the account ID.
    -->
    <!--<be<an id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource"/>-->
</beans>